name: Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: macos-latest # Need macOS for native builds
    if: ${{ !contains(github.event.head_commit.message, 'skip ci') }}
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Python (for node-gyp)
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install node-gyp globally
        run: npm install -g node-gyp

      - name: Build TypeScript library
        run: bun run build

      - name: Build native module
        run: bun run build:native

      - name: Run tests
        run: |
          # Basic smoke tests
          node -e "
            try {
              require('./dist/index.cjs');
              console.log('‚úÖ CJS build works');
            } catch (err) {
              if (!err.message.includes('NSViewFrameDidChangeNotification') && !err.message.includes('Cannot find module')) {
                throw err;
              }
              console.log('‚úÖ CJS build works (expected native error)');
            }
          "

      - name: Determine version bump
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "bump=${{ github.event.inputs.release-type }}" >> $GITHUB_OUTPUT
          else
            # Auto-determine based on commit messages
            if git log --format=%B -n 1 | grep -q "BREAKING CHANGE\|!:"; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif git log --format=%B -n 1 | grep -q "^feat"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            else
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: bump
        run: |
          OLD_VERSION=$(node -p "require('./package.json').version")
          bun run npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          # Create or update CHANGELOG.md
          if [[ ! -f CHANGELOG.md ]]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new version entry
          DATE=$(date +%Y-%m-%d)
          sed -i '' "3i\\
          ## [${{ steps.bump.outputs.new_version }}] - $DATE\\
          \\
          ### Added\\
          - Release ${{ steps.bump.outputs.new_version }}\\
          \\
          " CHANGELOG.md

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
          git push

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.bump.outputs.tag }}
          name: Release ${{ steps.bump.outputs.tag }}
          body: |
            ## Changes in ${{ steps.bump.outputs.tag }}

            ### What's Changed
            - Version bump from ${{ steps.bump.outputs.old_version }} to ${{ steps.bump.outputs.new_version }}

            **Full Changelog**: https://github.com/meridius-labs/electron-liquid-glass/compare/v${{ steps.bump.outputs.old_version }}...${{ steps.bump.outputs.tag }}

            ### Installation
            ```bash
            npm install electron-liquid-glass@${{ steps.bump.outputs.new_version }}
            ```
          draft: false
          prerelease: ${{ contains(steps.bump.outputs.new_version, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: |
          # Ensure we have the built files
          bun run build:all

          # Publish to npm
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "üéâ Release completed successfully!"
          echo "Check the release at: https://github.com/meridius-labs/electron-liquid-glass/releases"

      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Check the logs for details."
